<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a0bb4ded-4257-443b-8517-a2586815c062" activeEnvironment="Default" name="Postman Echo 1" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.

The documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)</con:description><con:settings/><con:interface xsi:type="con:RestService" id="507e7fe0-a4d6-4304-8005-5f2eea6e51c9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://postman-echo.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://BXKBFH2:8089/</con:endpoint><con:endpoint>https://postman-echo.com</con:endpoint></con:endpoints><con:resource name="Add" path="/time/add" id="15929f4b-ca86-4092-892f-a0790a4f9c83"><con:settings/><con:parameters/><con:method name="Add 1" id="f53c16f8-b13a-44b7-b609-dcd1832bbcd4" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>years</con:name><con:value>100</con:value><con:style>QUERY</con:style><con:default>100</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="https://postman-echo.com/time/add">add:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="https://postman-echo.com/time/add">add:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Time addition" id="b853c7a7-9478-4bad-8965-72c54589309e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/add</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="years" value="100"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>years</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Before" path="/time/before" id="71b06711-7790-471b-977c-e857ecf2ea24"><con:settings/><con:parameters/><con:method name="Before 1" id="9b29497d-8171-4fd7-b057-61e3f6b0a917" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>target</con:name><con:value>2017-10-10</con:value><con:style>QUERY</con:style><con:default>2017-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bef="https://postman-echo.com/time/before">bef:Response</con:element></con:representation><con:request name="Before comparisons" id="240afb21-0e63-42be-bd76-38e70e897fee" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="timestamp" value="2016-10-10"/>
  <con:entry key="target" value="2017-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>target</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Ip" path="/ip" id="570c031c-90a0-4485-8815-236e5096a349"><con:settings/><con:parameters/><con:method name="Ip 1" id="23faa67f-8c02-468a-a918-b40132e68ee7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ip="https://postman-echo.com/ip">ip:Response</con:element></con:representation><con:request name="IP address in JSON format" id="3f6b4dc9-62df-443f-9e2b-6c91be5c9126" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Format" path="/time/format" id="35cd1ee4-c37b-4c1f-97eb-20b4b512b588"><con:settings/><con:parameters/><con:method name="Format 1" id="5b038f12-f15d-4b1c-93fe-6163ca529a40" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>format</con:name><con:value>mm</con:value><con:style>QUERY</con:style><con:default>mm</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Format timestamp" id="86830986-cf8f-4ed7-ac29-fb317fc235d2" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="format" value="mm"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>format</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Basic-auth" path="/basic-auth" id="6d87db19-371f-434c-ae46-b917f4655670"><con:settings/><con:parameters/><con:method name="Basic-auth 1" id="18d3420c-9650-47d5-a388-b2de49e5b27c" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic cG9zdG1hbjpwYXNzd29yZA==</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bas="https://postman-echo.com/basic-auth">bas:Response</con:element></con:representation><con:request name="Basic Auth" id="f101e828-f011-43a5-8438-1dd472d5c67e" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="Authorization" value="Basic cG9zdG1hbjpwYXNzd29yZA==" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="200" path="/status/200" id="bd6ba9c4-1da6-4d7f-afd9-1e23bc461b35"><con:settings/><con:parameters/><con:method name="200 1" id="be9ad34f-0a35-432b-a864-0a98baf74cbb" method="GET"><con:settings/><con:parameters/><con:request name="Response Status Code" id="f6cbb362-9602-4d10-8ec0-2cb44c0d321d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Headers" path="/headers" id="dbe4548e-7952-45bf-99ff-1454c82bd7dc"><con:settings/><con:parameters/><con:method name="Headers 1" id="1060af4a-df30-4636-8210-0f620e93902d" method="GET"><con:settings/><con:parameters><con:parameter><con:name>my-sample-header</con:name><con:value>Lorem ipsum dolor sit amet</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Request Headers" id="5e8bf677-3ae5-4578-8301-0b7f2fc8728d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="my-sample-header" value="Lorem ipsum dolor sit amet" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>my-sample-header</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Post" path="/post" id="a85fc819-85a9-4474-adb0-86b28ed933ce"><con:settings/><con:parameters/><con:method name="Post 1" id="b3336a6c-25de-4958-acab-d052d68a6f2c" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value>text/plain</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:post="https://postman-echo.com/post">post:Response</con:element></con:representation><con:request name="POST Raw Text" id="bb2c98e1-c2ad-4de5-9e24-f4772cb719a0" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request>Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.
Maecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method><con:method name="Post 2" id="7c20efc9-ddd4-43cb-aaf4-52178fc99c9f" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value>application/x-www-form-urlencoded</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:post="https://postman-echo.com/post">post:Response</con:element></con:representation><con:request name="POST Form Data" id="25b3c5f5-44eb-4050-833a-d314290544df" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Collection" path="/transform/collection" id="73b7190f-141a-4e90-a934-f3110c7fcc54"><con:settings/><con:parameters/><con:method name="Collection 1" id="4563f4e1-3859-4d80-a229-4446628560b8" method="POST"><con:settings/><con:parameters><con:parameter><con:name>from</con:name><con:value>2</con:value><con:style>QUERY</con:style><con:default>2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>to</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value>application/json</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Transform collection from format v2 to v1" id="d03844a6-7215-4ee2-8551-b79aa4024378" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request>{
  "info": {
    "name": "Sample Postman Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "description": "A sample collection to demonstrate collections as a set of related requests"
  },

  "item": [{
    "name": "A simple GET request",
    "event": [{
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": ["tests['response code is 200'] = (responseCode.code === 200);"]
      }
    }],
    "request": {
      "url": "https://postman-echo.com/get?source=newman-sample-github-collection",
      "method": "GET"
    }
  }, {
    "name": "A simple POST request",
    "request": {
      "url": "https://postman-echo.com/post",
      "method": "POST",
      "header": [{
        "key": "Content-Type",
        "value": "text/plain"
      }],
      "body": {
        "mode": "raw",
        "raw": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."
      }
    }
  }, {
    "name": "A simple POST request with JSON body",
    "request": {
      "url": "https://postman-echo.com/post",
      "method": "POST",
      "header": [{
        "key": "Content-Type",
        "value": "application/json"
      }],
      "body": {
        "mode": "raw",
        "raw": "{\"text\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}"
      }
    }
  }]
}</con:request><con:parameters>
  <con:entry key="from" value="2"/>
  <con:entry key="to" value="1"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>from</con:entry><con:entry>to</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method><con:method name="Collection 2" id="a1fd13d7-6763-4c4c-819f-2d95b4404d40" method="POST"><con:settings/><con:parameters><con:parameter><con:name>from</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>to</con:name><con:value>2</con:value><con:style>QUERY</con:style><con:default>2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value>application/json</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Transform collection from format v1 to v2" id="b29ae1ac-bee3-452b-9a18-a37b29c6eda9" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request>{
  "id": "7875be4b-917d-4aff-8cc4-5606c36bf418",
  "name": "Sample Postman Collection",
  "description": "A sample collection to demonstrate collections as a set of related requests",
  "order": [
    "4d9134be-e8bf-4693-9cd7-1c0fc66ae739",
    "141ba274-cc50-4377-a59c-e080066f375e",
    "4511ca8b-0bc7-430f-b894-a7ec1036f322"
  ],
  "folders": [],
  "requests": [
    {
      "id": "4d9134be-e8bf-4693-9cd7-1c0fc66ae739",
      "name": "A simple GET request",
      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",
      "method": "GET",
      "headers": "",
      "data": [],
      "rawModeData": "",
      "tests": "tests['response code is 200'] = (responseCode.code === 200);",
      "preRequestScript": "",
      "url": "https://postman-echo.com/get?source=newman-sample-github-collection"
    },
    {
      "id": "141ba274-cc50-4377-a59c-e080066f375e",
      "name": "A simple POST request",
      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",
      "method": "POST",
      "headers": "Content-Type: text/plain",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...",
      "url": "https://postman-echo.com/post"
    },
    {
      "id": "4511ca8b-0bc7-430f-b894-a7ec1036f322",
      "name": "A simple POST request with JSON body",
      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",
      "method": "POST",
      "headers": "Content-Type: application/json",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"text\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}",
      "url": "https://postman-echo.com/post"
    }
  ]
}</con:request><con:parameters>
  <con:entry key="from" value="1"/>
  <con:entry key="to" value="2"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>from</con:entry><con:entry>to</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Start" path="/time/start" id="bd1b33f5-ae80-4c8f-b624-1bd8453a31f1"><con:settings/><con:parameters/><con:method name="Start 1" id="cfadceda-8279-488e-88db-7abe1ebaf326" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>unit</con:name><con:value>month</con:value><con:style>QUERY</con:style><con:default>month</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:star="https://postman-echo.com/time/start">star:Response</con:element></con:representation><con:request name="Start of time" id="125c706f-8e77-4e0a-bed2-a5bb3442c289" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="unit" value="month"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:request></con:method><con:method name="Start 2" id="e2da296e-bb32-45f4-96b2-5a7b06ccc6ce" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>unit</con:name><con:value>month</con:value><con:style>QUERY</con:style><con:default>month</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Object representation" id="f8159dcc-49d7-47e6-9af7-d939ef12ca01" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="unit" value="month"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Oauth1" path="/oauth1" id="db4263bf-25f3-498a-b1bb-eef33ce9d0aa"><con:settings/><con:parameters/><con:method name="Oauth1 1" id="7bf9d7f1-d19f-45e6-8adf-464e5ef69876" method="GET"><con:settings/><con:parameters/><con:request name="OAuth1.0 Verify Signature" id="7ff60b8f-373a-4c89-a9c1-88886318078b" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Delete" path="/delete" id="f3af9115-2cba-4e1e-ae41-4cab063f2a5d"><con:settings/><con:parameters/><con:method name="Delete 1" id="560e706b-e443-4046-a46d-3ae069c44145" method="DELETE"><con:settings/><con:parameters/><con:request name="DELETE Request" id="b7934e23-69e5-476d-9ace-f045859f67b1" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Valid" path="/time/valid" id="8881bd09-4e11-4ef6-9b87-eab35922f882"><con:settings/><con:parameters/><con:method name="Valid 1" id="93f8219d-9c6b-493a-9262-f3744e99ffaa" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Timestamp validity" id="698a0c61-64ae-4413-ba17-112cf44b34c8" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="timestamp" value="2016-10-10" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>timestamp</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Hawk" path="/auth/hawk" id="2b6dff1f-8aa8-4228-94b9-6a05fdeedc7d"><con:settings/><con:parameters/><con:method name="Hawk 1" id="501aed1f-2ab7-4087-b834-18cf6fcd9911" method="GET"><con:settings/><con:parameters/><con:request name="Hawk Auth" id="9743d924-626f-41a5-92a5-8c70568a935e" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Now" path="/time/now" id="0efe81ba-a3ce-47c0-8f58-e70b0e5a2ad3"><con:settings/><con:parameters/><con:method name="Now 1" id="d5068e03-c286-47f1-b95b-9867f946b768" method="GET"><con:settings/><con:parameters/><con:request name="Current UTC time" id="5f43863b-c8fb-42b2-ad8b-2b9cf2667668" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Put" path="/put" id="f1b7cf24-0c28-40a6-bc4e-a0e075523270"><con:settings/><con:parameters/><con:method name="Put 1" id="cece3e6c-8ace-4b4b-a5dd-ff3b16ba8502" method="PUT"><con:settings/><con:parameters/><con:request name="PUT Request" id="18a0b1ee-f160-4203-b793-8ccc50731a0e" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="10" path="/stream/10" id="49e3608a-1457-4dbe-baa7-9e0c1fa69584"><con:settings/><con:parameters/><con:method name="10 1" id="b2ad1ed9-5c19-4bfa-8246-c5a112003369" method="GET"><con:settings/><con:parameters/><con:request name="Streamed Response" id="ed62fa3a-5a1f-4966-a9df-fff7ed82b256" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Utf8" path="/encoding/utf8" id="1fcb17b4-135c-43ba-8053-27045935a257"><con:settings/><con:parameters/><con:method name="Utf8 1" id="1c5eece6-c76d-4481-a5b6-e9ca95a15aa0" method="GET"><con:settings/><con:parameters/><con:request name="Get UTF8 Encoded Response" id="8bc054b1-9489-4c9a-b247-a20d1de7ea09" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Patch" path="/patch" id="0aa49f62-991b-427a-b156-432b52a70b60"><con:settings/><con:parameters/><con:method name="Patch 1" id="359da840-a263-430e-9f71-3da400c823a9" method="PATCH"><con:settings/><con:parameters/><con:request name="PATCH Request" id="23fbf1b0-790a-4d2f-9a47-e19ec3396db7" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Unit" path="/time/unit" id="2cb59967-c069-449d-8495-c0aaf7534d26"><con:settings/><con:parameters/><con:method name="Unit 1" id="49fd5714-5ff2-4eb8-b4b9-58f77040dd2c" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>unit</con:name><con:value>day</con:value><con:style>QUERY</con:style><con:default>day</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Extract timestamp unit" id="0b21e1f0-1234-4b25-8c63-3f4601b441ac" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="unit" value="day"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Cookies" path="/cookies" id="d30d3178-8e00-4c8f-a26d-7235a2dfa2d7"><con:settings/><con:parameters/><con:method name="Cookies 1" id="e88f1f94-ebe9-45c7-849d-126b5d96d9c8" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cook="https://postman-echo.com/cookies">cook:Response</con:element></con:representation><con:request name="Get Cookies" id="de4535e6-47a3-4fc0-9612-9ddebfa06a6d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Leap" path="/time/leap" id="a8e91bce-7fe5-4a58-bbf5-d54f6eb06fdb"><con:settings/><con:parameters/><con:method name="Leap 1" id="d0835875-7de3-429b-bc82-fe9f5b6bd740" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Leap year check" id="774d91d5-9491-4c1d-8a88-b21baea7e918" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="timestamp" value="2016-10-10" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>timestamp</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Subtract" path="/time/subtract" id="5d3f9e99-5d61-4176-bb5a-8a4b82109bc2"><con:settings/><con:parameters/><con:method name="Subtract 1" id="5eb393d3-eb80-4f46-a621-34a90166843a" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>years</con:name><con:value>100</con:value><con:style>QUERY</con:style><con:default>100</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sub="https://postman-echo.com/time/subtract">sub:Response</con:element></con:representation><con:request name="Time subtraction" id="61adaf3d-ce81-4958-a1e9-466fdaf2519d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="years" value="100"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>years</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Set" path="/cookies/set" id="bf44f8c0-d6fb-44ba-9110-c16c9e8f7895"><con:settings/><con:parameters/><con:method name="Set 1" id="2aa5955f-ef1e-4534-a7ab-e42f8a6e5849" method="GET"><con:settings/><con:parameters><con:parameter><con:name>foo1</con:name><con:value>bar1</con:value><con:style>QUERY</con:style><con:default>bar1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>foo2</con:name><con:value>bar2</con:value><con:style>QUERY</con:style><con:default>bar2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Set Cookies" id="3362f972-2944-44bf-8b0c-c2e40886255c" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="foo1" value="bar1"/>
  <con:entry key="foo2" value="bar2"/>
</con:parameters><con:parameterOrder><con:entry>foo1</con:entry><con:entry>foo2</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Between" path="/time/between" id="90ab1144-b303-46b0-aaea-cbfef5afe289"><con:settings/><con:parameters/><con:method name="Between 1" id="a95f1dd7-4ffe-4f34-9531-3b5e80f81189" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>start</con:name><con:value>2017-10-10</con:value><con:style>QUERY</con:style><con:default>2017-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>end</con:name><con:value>2019-10-10</con:value><con:style>QUERY</con:style><con:default>2019-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bet="https://postman-echo.com/time/between">bet:Response</con:element></con:representation><con:request name="Between timestamps" id="9f491b10-2a74-47c0-9c0e-cb2f13eeb581" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="start" value="2017-10-10"/>
  <con:entry key="end" value="2019-10-10"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>start</con:entry><con:entry>end</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="3" path="/delay/3" id="e223f1df-2e44-400c-b598-f1a31a9a6f3f"><con:settings/><con:parameters/><con:method name="3 1" id="c29332ca-6ffd-4324-b630-2c7073ea4f48" method="GET"><con:settings/><con:parameters/><con:request name="Delay Response" id="b2185c09-e32d-423d-827e-ad57ce2ab505" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Get" path="/get" id="97abe19e-e513-449f-9813-bbb50748b31a"><con:settings/><con:parameters/><con:method name="Get 1" id="faf34f27-71a6-49e4-bd44-2abd812317ca" method="GET"><con:settings/><con:parameters><con:parameter><con:name>test</con:name><con:value>123</con:value><con:style>QUERY</con:style><con:default>123</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="GET Request" id="20985d8b-5113-4295-9fab-157c71b96826" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="test" value="123" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>test</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Digest-auth" path="/digest-auth" id="e50641a9-54a0-4ad3-adaf-06e72fd67c08"><con:settings/><con:parameters/><con:method name="Digest-auth 1" id="9019282a-529c-4f33-babd-d0e7acbc6149" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Digest username="postman", realm="Users", nonce="ni1LiL0O37PRRhofWdCLmwFsnEtH1lew", uri="/digest-auth", response="254679099562cf07df9b6f5d8d15db44", opaque=""</con:value><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="DigestAuth Success" id="8c6c3a07-7d92-4d3a-a0ec-7f65ee53bfb3" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters><entry key="Authorization" value="Digest username=&quot;postman&quot;, realm=&quot;Users&quot;, nonce=&quot;ni1LiL0O37PRRhofWdCLmwFsnEtH1lew&quot;, uri=&quot;/digest-auth&quot;, response=&quot;254679099562cf07df9b6f5d8d15db44&quot;, opaque=&quot;&quot;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method><con:method name="Digest-auth 2" id="4e60799c-ff7c-4e58-95a9-87fdd529f06d" method="GET"><con:settings/><con:parameters/><con:request name="DigestAuth Request" id="1c698a09-55b6-4566-9e79-ed6a72ff6f80" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="Response-headers" path="/response-headers" id="d3544356-3a33-4435-84dc-b1dd8fd5f949"><con:settings/><con:parameters/><con:method name="Response-headers 1" id="6b2f0906-2a81-4010-83bb-4d2cfbb52871" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value>text/html</con:value><con:style>QUERY</con:style><con:default>text/html</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>test</con:name><con:value>response_headers</con:value><con:style>QUERY</con:style><con:default>response_headers</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Response Headers" id="1e32d9b7-58dd-4765-90ec-326405605e92" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="test" value="response_headers"/>
  <con:entry key="Content-Type" value="text/html"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>test</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Delete" path="/cookies/delete" id="58248524-b4b3-4d18-b38b-b36ecb3ab83c"><con:settings/><con:parameters/><con:method name="Delete 1" id="387e84e4-1d80-4439-91e5-b7d99cdb171a" method="GET"><con:settings/><con:parameters><con:parameter><con:name>foo1</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>foo2</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Delete Cookies" id="ec363c48-010a-4897-9819-f98d97d5e0d3" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="foo1" value=""/>
  <con:entry key="foo2" value=""/>
</con:parameters><con:parameterOrder><con:entry>foo1</con:entry><con:entry>foo2</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Deflate" path="/deflate" id="428bac09-5671-4ff9-b420-585567a27e5c"><con:settings/><con:parameters/><con:method name="Deflate 1" id="8e98074b-f9bb-416e-8347-16a4efaaa14c" method="GET"><con:settings/><con:parameters/><con:request name="Deflate Compressed Response" id="432762f2-213c-4b96-b63b-9adcb71430ae" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource><con:resource name="After" path="/time/after" id="475a958c-1da0-47dd-8aca-3c95f40cfd79"><con:settings/><con:parameters/><con:method name="After 1" id="456f362a-5c19-44bd-ad15-3cb4d3a90415" method="GET"><con:settings/><con:parameters><con:parameter><con:name>timestamp</con:name><con:value>2016-10-10</con:value><con:style>QUERY</con:style><con:default>2016-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>target</con:name><con:value>2017-10-10</con:value><con:style>QUERY</con:style><con:default>2017-10-10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:aft="https://postman-echo.com/time/after">aft:Response</con:element></con:representation><con:request name="After comparisons" id="fee9bc10-45eb-4fc2-9c71-79cbdd1100ce" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters>
  <con:entry key="timestamp" value="2016-10-10"/>
  <con:entry key="target" value="2017-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>target</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Gzip" path="/gzip" id="fdc61ded-cda4-405b-88d1-b6e693a591be"><con:settings/><con:parameters/><con:method name="Gzip 1" id="4da1bd20-d84f-4be8-abd1-464c35fa0f50" method="GET"><con:settings/><con:parameters/><con:request name="GZip Compressed Response" id="3447df03-75fc-4311-b13a-a08a1e18d42b" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="ce44092a-e27a-48f3-8ce3-4138b7d7dbe8" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8fa17fde-196b-428f-8184-2ed96a6dacfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Add 1 - Time addition" id="4f89b8a7-33f4-4c56-96c2-385d8867a90d"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/add" methodName="Add 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add 1 - Time addition" id="b853c7a7-9478-4bad-8965-72c54589309e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://BXKBFH2:8089/</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0d4b8cb5-2607-4723-9fac-4fe8b0520493" name="Valid HTTP Status Codes"><con:configuration><codes>200,400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52b450ad-b299-4345-9714-4bb9777a19cf" name="JsonPath Match"><con:configuration><path>$.sum</path><content>22</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5891c82f-2f4d-44c6-964e-a1616409965c" name="Contains"><con:configuration><token>Sat Oct 10 2116 00:00:00 GMT+0000</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="years" value="100"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>years</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Before 1 - Before comparisons" id="977c386f-9efe-44c2-a984-378a53e6e569"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/before" methodName="Before 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Before 1 - Before comparisons" id="240afb21-0e63-42be-bd76-38e70e897fee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/before</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd7e0053-cf64-480b-8438-8d732c0f187f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="timestamp" value="2016-10-10"/>
  <con:entry key="target" value="2017-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>target</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Ip 1 - IP address in JSON format" id="21246f57-74ee-4ba7-82ac-20c6cbbee8a9"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/ip" methodName="Ip 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Ip 1 - IP address in JSON format" id="3f6b4dc9-62df-443f-9e2b-6c91be5c9126" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/ip</con:originalUri><con:assertion type="Simple Contains" id="3ad09736-c738-49a3-a245-17776764e55f" name="CheckIfIpExist"><con:configuration><token>91.227.21.29</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bdbf6980-b7e2-45c8-82ba-46152f281c61" name="JsonPath Match"><con:configuration><path>$.ip</path><content>91.227.21.29</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Format 1 - Format timestamp" id="da494b27-8ef9-4082-a20d-9162bb8d74a5"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/format" methodName="Format 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Format 1 - Format timestamp" id="86830986-cf8f-4ed7-ac29-fb317fc235d2" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="284861a4-a2f5-432f-88b9-475c25ab0a7c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="mm"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>format</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Basic-auth 1 - Basic Auth" id="4267ae6e-872c-4df7-9802-79418b54c852"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/basic-auth" methodName="Basic-auth 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Basic-auth 1 - Basic Auth" id="f101e828-f011-43a5-8438-1dd472d5c67e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/basic-auth</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="daa79304-184b-4ce8-833d-bb160e97d21f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0a16f2db-01a2-4e91-8a83-b818bdf9e934" name="Contains"><con:configuration><token>authenticated</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Basic cG9zdG1hbjpwYXNzd29yZA==" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="200 1 - Response Status Code" id="a60bf83e-c071-497d-baf4-b3879795345c"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/status/200" methodName="200 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="200 1 - Response Status Code" id="f6cbb362-9602-4d10-8ec0-2cb44c0d321d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Simple Contains" id="19220e4a-bc52-4dc7-8512-3e7028733273" name="Contains"><con:configuration><token>status</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Headers 1 - Request Headers" id="979759d1-4a37-41ce-9cb6-56d613eb60d7"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/headers" methodName="Headers 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Headers 1 - Request Headers" id="5e8bf677-3ae5-4578-8301-0b7f2fc8728d" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Simple Contains" id="920059eb-b70f-4efa-8793-c7f965068c3a" name="Contains"><con:configuration><token>headers</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="my-sample-header" value="Lorem ipsum dolor sit amet" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>my-sample-header</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Post 1 - POST Raw Text" id="5c826dc4-6880-4829-a0d4-f483326b78a9"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/post" methodName="Post 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post 1 - POST Raw Text" id="bb2c98e1-c2ad-4de5-9e24-f4772cb719a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request>Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.
Maecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.</con:request><con:originalUri>https://postman-echo.com/post</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Start 1 - Start of time" id="c30cbd61-2d4b-43bb-b496-4bce76ffd03e"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/start" methodName="Start 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Start 1 - Start of time" id="125c706f-8e77-4e0a-bed2-a5bb3442c289" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/start</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="553cf004-51f5-42c7-ad39-4aae59839fea" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="unit" value="month"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Start 2 - Object representation" id="08eb55b2-44ce-475e-89dd-a5ca07691638"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/start" methodName="Start 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Start 2 - Object representation" id="f8159dcc-49d7-47e6-9af7-d939ef12ca01" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="abe9e538-5680-462e-9c0b-f81ff002681d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="unit" value="month"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Oauth1 1 - OAuth1.0 Verify Signature" id="a82e1f8a-bc79-43c3-bffd-40314192eb32"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/oauth1" methodName="Oauth1 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Oauth1 1 - OAuth1.0 Verify Signature" id="7ff60b8f-373a-4c89-a9c1-88886318078b" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete 1 - DELETE Request" id="45c1aec9-31bf-4e6b-81b8-8b3c6edddb52"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/delete" methodName="Delete 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete 1 - DELETE Request" id="b7934e23-69e5-476d-9ace-f045859f67b1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Post 2 - POST Form Data" id="c39b6f3a-d79f-40f7-b8d4-c13a89d44755"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/post" methodName="Post 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post 2 - POST Form Data" id="25b3c5f5-44eb-4050-833a-d314290544df" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/post</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Valid 1 - Timestamp validity" id="ef73bcca-427a-410e-b1bb-41eda3657e02"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/valid" methodName="Valid 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Valid 1 - Timestamp validity" id="698a0c61-64ae-4413-ba17-112cf44b34c8" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="1faebc60-f50f-409b-a2ac-6f7a1b2efff3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="timestamp" value="2016-10-10" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>timestamp</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Hawk 1 - Hawk Auth" id="30c9baa8-804c-4cba-8813-5d5b402348ff"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/auth/hawk" methodName="Hawk 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Hawk 1 - Hawk Auth" id="9743d924-626f-41a5-92a5-8c70568a935e" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="ab0a822f-e133-458e-9c24-007c499b626f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Now 1 - Current UTC time" id="e425eb34-c5d0-4ebd-bb6b-c2453ec0c7fa"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/now" methodName="Now 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Now 1 - Current UTC time" id="5f43863b-c8fb-42b2-ad8b-2b9cf2667668" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="485c607a-fd82-4d12-9ce4-9ec214aadc2b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="269b0c48-bc34-48e1-9c45-125228216175" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders.hasValues("date")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Put 1 - PUT Request" id="ed2bef68-804d-46b3-8e8f-6ce6678a1d2c"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/put" methodName="Put 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Put 1 - PUT Request" id="18a0b1ee-f160-4203-b793-8ccc50731a0e" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="10 1 - Streamed Response" id="1e1182ed-038e-49cc-a0a5-00408747d83e"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/stream/10" methodName="10 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="10 1 - Streamed Response" id="ed62fa3a-5a1f-4966-a9df-fff7ed82b256" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="eae3067f-d70a-4079-94ad-c71e72b42301" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7372b03f-9a91-4655-bf79-7e7abbe788ac" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders.hasValues('Transfer-Encoding')</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Utf8 1 - Get UTF8 Encoded Response" id="3d522491-e8b7-4462-bbfc-8da1baaba977"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/encoding/utf8" methodName="Utf8 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Utf8 1 - Get UTF8 Encoded Response" id="8bc054b1-9489-4c9a-b247-a20d1de7ea09" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="37484ee8-11c2-4c4b-9774-783df9841e84" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Patch 1 - PATCH Request" id="449a24ce-bbfc-445e-8875-d3fd2473c54c"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/patch" methodName="Patch 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Patch 1 - PATCH Request" id="23fbf1b0-790a-4d2f-9a47-e19ec3396db7" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Unit 1 - Extract timestamp unit" id="9e972f40-8c99-4e79-aea4-34730506a5a8"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/unit" methodName="Unit 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Unit 1 - Extract timestamp unit" id="0b21e1f0-1234-4b25-8c63-3f4601b441ac" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="5aae6197-e9b4-436b-a3b1-0856d0789b5d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="unit" value="day"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>unit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Cookies 1 - Get Cookies" id="7f2f5c57-d0a1-4261-b0b6-72cd41758987"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/cookies" methodName="Cookies 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Cookies 1 - Get Cookies" id="de4535e6-47a3-4fc0-9612-9ddebfa06a6d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/cookies</con:originalUri><con:assertion type="Simple Contains" id="c3f37a68-a40d-4d48-a2d5-60c2e8510b41" name="Contains"><con:configuration><token>cookies</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="38942077-33f4-4dc6-bca9-2233f879d844" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Leap 1 - Leap year check" id="8ec44031-db14-4eac-ae86-1bb28f98bdda"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/leap" methodName="Leap 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Leap 1 - Leap year check" id="774d91d5-9491-4c1d-8a88-b21baea7e918" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="60166b59-6350-4202-a4f5-a02e25dfc94c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="timestamp" value="2016-10-10" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>timestamp</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Subtract 1 - Time subtraction" id="fb6041d2-5a98-4990-b540-18ffab63e100"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/subtract" methodName="Subtract 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Subtract 1 - Time subtraction" id="61adaf3d-ce81-4958-a1e9-466fdaf2519d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/subtract</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="42c38496-4e9e-4f28-96e8-58a428c248de" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="years" value="100"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>years</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Set 1 - Set Cookies" id="1a4554b9-105a-4639-8a6c-3e8fa5ea5671"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/cookies/set" methodName="Set 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Set 1 - Set Cookies" id="3362f972-2944-44bf-8b0c-c2e40886255c" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="foo1" value="bar1"/>
  <con:entry key="foo2" value="bar2"/>
</con:parameters><con:parameterOrder><con:entry>foo1</con:entry><con:entry>foo2</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Between 1 - Between timestamps" id="d57b1464-bd73-42d0-9123-87ee6212a273"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/between" methodName="Between 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Between 1 - Between timestamps" id="9f491b10-2a74-47c0-9c0e-cb2f13eeb581" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/between</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9bdab9ba-7e56-47ac-b4b1-5f8786b13e80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="start" value="2017-10-10"/>
  <con:entry key="end" value="2019-10-10"/>
  <con:entry key="timestamp" value="2016-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>start</con:entry><con:entry>end</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="3 1 - Delay Response" id="4473efa3-0309-4cc8-b5c2-18b2085beef6"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/delay/3" methodName="3 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="3 1 - Delay Response" id="b2185c09-e32d-423d-827e-ad57ce2ab505" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="7f56d5d3-6f25-4559-826c-e10e116a86dc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get 1 - GET Request" id="8c90de35-9f88-47dc-901e-df8bc0bef904"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/get" methodName="Get 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get 1 - GET Request" id="20985d8b-5113-4295-9fab-157c71b96826" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="test" value="123" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>test</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Digest-auth 1 - DigestAuth Success" id="0cc4fab7-29b6-40f3-987d-359a5d8fa944"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/digest-auth" methodName="Digest-auth 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Digest-auth 1 - DigestAuth Success" id="8c6c3a07-7d92-4d3a-a0ec-7f65ee53bfb3" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d9286096-a333-4f52-8ce7-6d62848d8b6d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ff73231-6e86-453f-bf9d-010176024ba3" name="Contains"><con:configuration><token>authenticated</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Digest username=&quot;postman&quot;, realm=&quot;Users&quot;, nonce=&quot;ni1LiL0O37PRRhofWdCLmwFsnEtH1lew&quot;, uri=&quot;/digest-auth&quot;, response=&quot;254679099562cf07df9b6f5d8d15db44&quot;, opaque=&quot;&quot;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Response-headers 1 - Response Headers" id="14f88cf6-b702-4dc4-8bb3-9323bd4213a0"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/response-headers" methodName="Response-headers 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Response-headers 1 - Response Headers" id="1e32d9b7-58dd-4765-90ec-326405605e92" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="test" value="response_headers"/>
  <con:entry key="Content-Type" value="text/html"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>test</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete 1 - Delete Cookies" id="94a7ad33-e277-4035-9137-662955042ce0"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/cookies/delete" methodName="Delete 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete 1 - Delete Cookies" id="ec363c48-010a-4897-9819-f98d97d5e0d3" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="foo1" value=""/>
  <con:entry key="foo2" value=""/>
</con:parameters><con:parameterOrder><con:entry>foo1</con:entry><con:entry>foo2</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Deflate 1 - Deflate Compressed Response" id="8ef3cd7a-52f6-4178-9c54-47cdc9c4eb0e"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/deflate" methodName="Deflate 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Deflate 1 - Deflate Compressed Response" id="432762f2-213c-4b96-b63b-9adcb71430ae" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="After 1 - After comparisons" id="0760c23b-6c36-4383-9772-a00f2a6a9461"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/time/after" methodName="After 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="After 1 - After comparisons" id="fee9bc10-45eb-4fc2-9c71-79cbdd1100ce" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:originalUri>https://postman-echo.com/time/after</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8bce615c-a845-46d0-afcb-277258a23b40" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="timestamp" value="2016-10-10"/>
  <con:entry key="target" value="2017-10-10"/>
</con:parameters><con:parameterOrder><con:entry>timestamp</con:entry><con:entry>target</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Gzip 1 - GZip Compressed Response" id="7b8ff7e4-59f8-47e0-b60c-ef00e8b4a4cb"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/gzip" methodName="Gzip 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Gzip 1 - GZip Compressed Response" id="3447df03-75fc-4311-b13a-a08a1e18d42b" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Digest-auth 2 - DigestAuth Request" id="437b8fcc-9187-41a6-b996-7f8a96f5e9b1"><con:settings/><con:config service="https://postman-echo.com" resourcePath="/digest-auth" methodName="Digest-auth 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Digest-auth 2 - DigestAuth Request" id="1c698a09-55b6-4566-9e79-ed6a72ff6f80" mediaType="application/json"><con:settings/><con:endpoint>https://postman-echo.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="bee59f3f-2cd1-46cd-8828-7e7824bdbe4b" port="8089" path="/" host="BXKBFH2" name="REST MockService 1"><con:settings/><con:properties/><con:restMockAction name="/time/add" method="GET" resourcePath="/time/add" id="1427f50f-4823-463d-80c3-835f89bbbb08"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="51956382-8ffb-4dec-a819-c2791d028149" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"sum": "Sat Oct 10 2116 00:00:00 GMT+0000"}</con:responseContent></con:response><con:response name="Response 2" id="b14c7234-1ac6-4460-afbe-a975116f8742" httpResponseStatus="400"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/time/before" method="GET" resourcePath="/time/before" id="4e621975-5507-491d-8c9b-04d3f2b3ada3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="168ccbeb-c1ee-48fd-a3d3-e736ca1045c1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/ip" method="GET" resourcePath="/ip" id="a4233958-3792-436a-935f-b5c601abc47a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="11aee0c3-4306-4e98-8ca7-0e473399eb0d" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/format" method="GET" resourcePath="/time/format" id="19b8fadb-9c84-40a9-b091-b5ada61cad62"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ac46249a-0aea-4a86-b53d-112d2bae707e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/basic-auth" method="GET" resourcePath="/basic-auth" id="80d6024a-3922-4274-bc76-0f73010910e5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2f6a5b0b-b834-49d5-b8d2-b73ca9551cc8" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/status/200" method="GET" resourcePath="/status/200" id="b005d9c2-407d-46ac-bf25-e2c864d1319d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8c456b2f-e966-4d73-ae1e-01dcd5b1c8ae" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/headers" method="GET" resourcePath="/headers" id="cf06a5c8-2d56-4549-b20d-e5d55034d8da"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e0420808-71a8-4007-bf57-91d613efca99" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/post" method="POST" resourcePath="/post" id="b79ac405-a5d8-401f-949c-2993f69b4f69"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="de0a2618-1568-4a4d-a1db-1a4c3e1f3f17" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/post" method="POST" resourcePath="/post" id="f2f93e5d-667c-4954-9886-9938cacbba98"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="27f5228d-89f1-4b30-8506-b6dd699494bd" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transform/collection" method="POST" resourcePath="/transform/collection" id="bf5fcff0-f07e-42c5-b467-97e07d2ab703"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8350edb3-29d4-40f5-936c-df82ad46b6ac" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transform/collection" method="POST" resourcePath="/transform/collection" id="ddf6c976-a9d9-475f-be58-3d83f56b686e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f9488065-9f02-41ff-bfb5-3b0a32ea49a1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/start" method="GET" resourcePath="/time/start" id="6608b4b8-6ec1-40a6-9415-c8f641c65693"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ff2b2c5b-4584-4b28-8c06-27b9f41bf2f5" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/start" method="GET" resourcePath="/time/start" id="06ed6cb0-a794-4fa2-9125-c4e35fd52696"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="86d95b42-b647-49a0-a9e0-d7eba25da3bc" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/oauth1" method="GET" resourcePath="/oauth1" id="b69d2ffd-8704-4b3f-b86f-81113e924bd1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9c5fc02b-94db-49c8-9be8-079406377fdc" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/delete" method="DELETE" resourcePath="/delete" id="8072f07b-792e-473e-ad26-622d8bc9b152"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2af684d5-6c8a-425c-bc05-81dfecf47e1e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/valid" method="GET" resourcePath="/time/valid" id="117d8626-f596-4e8e-8bb4-5fee2b4f507f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1e1a40bd-33a6-4644-8586-748fb722a4c7" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/auth/hawk" method="GET" resourcePath="/auth/hawk" id="7a25e32d-6349-4eec-ba0e-ad7c12375504"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3633028e-80af-48c4-aa8c-27b9a79d80fb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/now" method="GET" resourcePath="/time/now" id="f21864da-2a2a-4799-9993-3cc5fc6fdb0c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="28e52755-8654-4cf4-937f-5e8c4a392db3" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/put" method="PUT" resourcePath="/put" id="81c9c9aa-44d9-4c9b-8933-4ca63a2bc930"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4a3ad9c4-b5be-4d90-ab3b-c209c99ba253" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/stream/10" method="GET" resourcePath="/stream/10" id="b6e5147a-76e9-4900-adbe-b7afe36a0be6"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1cda2ab3-dcc4-4f90-8db1-9fb66a32622b" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/encoding/utf8" method="GET" resourcePath="/encoding/utf8" id="b1ec5c65-9a92-44cf-92da-1f3947dfa498"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2bc44295-4319-407b-95a9-bed035a2bc3a" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/patch" method="PATCH" resourcePath="/patch" id="53708667-1084-4f48-aa1a-244c60dad6da"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b4729d65-2594-4cae-8f87-54003e16ccf4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/unit" method="GET" resourcePath="/time/unit" id="0641a7dc-409d-403e-bdc0-94ac9b3cfc42"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1e3418df-963e-40a8-bd35-134d8426544e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/cookies" method="GET" resourcePath="/cookies" id="c4a688f3-8a83-44bc-80aa-f0674121b57a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="db44de74-1b88-4295-9f21-9e32a8e6b19b" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/leap" method="GET" resourcePath="/time/leap" id="4d7d51c0-d42d-4aaf-b693-1dd02e35ffa4"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="78c77a41-de8b-4222-a530-be0e7f6394ba" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/subtract" method="GET" resourcePath="/time/subtract" id="dc8e01de-5f09-4a21-b410-e153f50001f7"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f09b89e4-b6c0-4cdf-b4f1-e48cbcbd5a5f" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/cookies/set" method="GET" resourcePath="/cookies/set" id="d7e61579-dd2a-4775-9b9f-e6e15e1a1bb3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9169a59f-48a3-4cd3-a8fd-c1fb410265cb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/between" method="GET" resourcePath="/time/between" id="ed1c8530-d00a-438d-92f9-91768ddc6bfa"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6ec80a47-7133-409a-9b19-b1a03d5dba1e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/delay/3" method="GET" resourcePath="/delay/3" id="1f33fe23-d232-40d2-ac92-ad040946cdcc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="620943e1-8236-4611-98a1-6aa86f669c8d" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/get" method="GET" resourcePath="/get" id="fd45a197-2551-4889-ad91-4861f65c7f89"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4482f986-33d3-46a7-8345-31dbf2258799" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/digest-auth" method="GET" resourcePath="/digest-auth" id="4693c3d1-aaf4-4b81-8bbd-6e6563a6a151"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5fe07812-1fbf-4fe7-a17e-80657fc66cc4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/digest-auth" method="GET" resourcePath="/digest-auth" id="eaabc906-c316-4ab5-a50d-908fddcec5b2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="88c28924-b1d9-4c7e-8f94-2e78af2b7b8f" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/response-headers" method="GET" resourcePath="/response-headers" id="69095303-1f35-4cda-8548-7210a06fbcdf"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c34da9b4-85f6-4af7-8eaf-1a2f25e8b108" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/cookies/delete" method="GET" resourcePath="/cookies/delete" id="a5982a5d-05a1-4861-8396-a2c9085bfaa2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="aa992315-77f5-42e9-ba9d-d0a565071f3c" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/deflate" method="GET" resourcePath="/deflate" id="366c1e44-c6de-448e-a943-de6ab9612245"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="115ead3d-8047-4135-a76f-1d7d77f88e35" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/time/after" method="GET" resourcePath="/time/after" id="b40e820e-764d-42e5-8dbc-ac58b291352f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6763bf20-4069-4f1e-973d-43912023e5ff" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/gzip" method="GET" resourcePath="/gzip" id="5c04b494-af99-447b-a67b-8bdfec0887b1"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="fb9506e9-b37c-4344-9482-7f37c99d056c" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>